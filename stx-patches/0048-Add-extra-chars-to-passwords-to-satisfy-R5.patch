From 0722cb84c442a65868aeb0b17a55c4ccaea9bc56 Mon Sep 17 00:00:00 2001
From: Al Bailey <Al.Bailey@windriver.com>
Date: Thu, 11 Jan 2018 13:52:27 -0600
Subject: [PATCH 48/57] Add extra chars to passwords to satisfy R5 password rules

Wait condition handles would encounter keystone errors due to invalid password without this fix.
This also applies for EC2 related nova VMs (which we never use) as well as signal responder which is used by magnum
---
 .../clients/os/keystone/heat_keystoneclient.py     |  8 +++----
 .../openstack/heat/wait_condition_handle.py        |  2 +-
 heat/engine/resources/server_base.py               |  2 +-
 heat/engine/resources/signal_responder.py          |  4 ++--
 heat/tests/clients/test_heat_client.py             | 25 +++++++++++-----------
 5 files changed, 21 insertions(+), 20 deletions(-)

diff --git a/heat/engine/clients/os/keystone/heat_keystoneclient.py b/heat/engine/clients/os/keystone/heat_keystoneclient.py
index 21131d3..ca73f74 100644
--- a/heat/engine/clients/os/keystone/heat_keystoneclient.py
+++ b/heat/engine/clients/os/keystone/heat_keystoneclient.py
@@ -476,8 +476,8 @@ class KsClientWrapper(object):
     def create_ec2_keypair(self, user_id=None):
         user_id = user_id or self.context.get_access(self.session).user_id
         project_id = self.context.tenant_id
-        data_blob = {'access': uuid.uuid4().hex,
-                     'secret': uuid.uuid4().hex}
+        data_blob = {'access': uuid.uuid4().hex + "TiC1*",
+                     'secret': uuid.uuid4().hex + "TiC1*"}
         ec2_creds = self.client.credentials.create(
             user=user_id, type='ec2', blob=jsonutils.dumps(data_blob),
             project=project_id)
@@ -495,8 +495,8 @@ class KsClientWrapper(object):
             # FIXME(shardy): Legacy fallback for folks using old heat.conf
             # files which lack domain configuration
             return self.create_ec2_keypair(user_id)
-        data_blob = {'access': uuid.uuid4().hex,
-                     'secret': uuid.uuid4().hex}
+        data_blob = {'access': uuid.uuid4().hex + "TiC1*",
+                     'secret': uuid.uuid4().hex + "TiC1*"}
         creds = self.domain_admin_client.credentials.create(
             user=user_id, type='ec2', blob=jsonutils.dumps(data_blob),
             project=project_id)
diff --git a/heat/engine/resources/openstack/heat/wait_condition_handle.py b/heat/engine/resources/openstack/heat/wait_condition_handle.py
index c22a4f7..4620f9a 100644
--- a/heat/engine/resources/openstack/heat/wait_condition_handle.py
+++ b/heat/engine/resources/openstack/heat/wait_condition_handle.py
@@ -135,7 +135,7 @@ class HeatWaitConditionHandle(wc_base.BaseWaitConditionHandle):
             self.SIGNAL_TRANSPORT) == self.TOKEN_SIGNAL
 
     def handle_create(self):
-        self.password = uuid.uuid4().hex
+        self.password = uuid.uuid4().hex + "TiC1*"
         super(HeatWaitConditionHandle, self).handle_create()
         if self._signal_transport_token():
             # FIXME(shardy): The assumption here is that token expiry > timeout
diff --git a/heat/engine/resources/server_base.py b/heat/engine/resources/server_base.py
index f2d6349..647ed0c 100644
--- a/heat/engine/resources/server_base.py
+++ b/heat/engine/resources/server_base.py
@@ -151,7 +151,7 @@ class BaseServer(stack_user.StackUser):
         elif (self.transport_poll_server_heat(props) or
               self.transport_zaqar_message(props)):
             if self.password is None:
-                self.password = uuid.uuid4().hex
+                self.password = uuid.uuid4().hex + "TiC1*"
             self._create_user()
 
         self._register_access_key()
diff --git a/heat/engine/resources/signal_responder.py b/heat/engine/resources/signal_responder.py
index dca48f0..335276f 100644
--- a/heat/engine/resources/signal_responder.py
+++ b/heat/engine/resources/signal_responder.py
@@ -103,7 +103,7 @@ class SignalResponder(stack_user.StackUser):
         """
         if self._get_user_id() is None:
             if self.password is None:
-                self.password = uuid.uuid4().hex
+                self.password = uuid.uuid4().hex + "TiC1*"
             self._create_user()
         return {'auth_url': self.keystone().v3_endpoint,
                 'username': self.physical_resource_name(),
@@ -295,7 +295,7 @@ class SignalResponder(stack_user.StackUser):
 
         if self._get_user_id() is None:
             if self.password is None:
-                self.password = uuid.uuid4().hex
+                self.password = uuid.uuid4().hex + "TiC1*"
             self._create_user()
 
         queue_id = self.physical_resource_name()
diff --git a/heat/tests/clients/test_heat_client.py b/heat/tests/clients/test_heat_client.py
index 0584fd0..8a784b0 100644
--- a/heat/tests/clients/test_heat_client.py
+++ b/heat/tests/clients/test_heat_client.py
@@ -1006,8 +1006,9 @@ class KeystoneClientTest(common.HeatTestCase):
         ctx = utils.dummy_context()
         ctx.trust_id = None
 
-        ex_data = {'access': 'dummy_access',
-                   'secret': 'dummy_secret'}
+        # TiC1* is automatically appended to the uuid hex calls
+        ex_data = {'access': 'dummy_accessTiC1*',
+                   'secret': 'dummy_secretTiC1*'}
         ex_data_json = json.dumps(ex_data)
 
         # stub UUID.hex to match ex_data
@@ -1029,8 +1030,8 @@ class KeystoneClientTest(common.HeatTestCase):
         heat_ks_client = heat_keystoneclient.KeystoneClient(ctx)
         ec2_cred = heat_ks_client.create_ec2_keypair(user_id='atestuser')
         self.assertEqual('123456', ec2_cred.id)
-        self.assertEqual('dummy_access', ec2_cred.access)
-        self.assertEqual('dummy_secret', ec2_cred.secret)
+        self.assertEqual('dummy_accessTiC1*', ec2_cred.access)
+        self.assertEqual('dummy_secretTiC1*', ec2_cred.secret)
 
     def test_create_stack_domain_user_keypair(self):
 
@@ -1042,8 +1043,8 @@ class KeystoneClientTest(common.HeatTestCase):
         self.patchobject(ctx, '_create_auth_plugin')
         ctx.trust_id = None
 
-        ex_data = {'access': 'dummy_access2',
-                   'secret': 'dummy_secret2'}
+        ex_data = {'access': 'dummy_access2TiC1*',
+                   'secret': 'dummy_secret2TiC1*'}
         ex_data_json = json.dumps(ex_data)
 
         # stub UUID.hex to match ex_data
@@ -1066,8 +1067,8 @@ class KeystoneClientTest(common.HeatTestCase):
         ec2_cred = heat_ks_client.create_stack_domain_user_keypair(
             user_id='atestuser2', project_id='aproject')
         self.assertEqual('1234567', ec2_cred.id)
-        self.assertEqual('dummy_access2', ec2_cred.access)
-        self.assertEqual('dummy_secret2', ec2_cred.secret)
+        self.assertEqual('dummy_access2TiC1*', ec2_cred.access)
+        self.assertEqual('dummy_secret2TiC1*', ec2_cred.secret)
 
     def test_create_stack_domain_user_keypair_legacy_fallback(self):
 
@@ -1079,8 +1080,8 @@ class KeystoneClientTest(common.HeatTestCase):
         ctx = utils.dummy_context()
         ctx.trust_id = None
 
-        ex_data = {'access': 'dummy_access2',
-                   'secret': 'dummy_secret2'}
+        ex_data = {'access': 'dummy_access2TiC1*',
+                   'secret': 'dummy_secret2TiC1*'}
         ex_data_json = json.dumps(ex_data)
 
         # stub UUID.hex to match ex_data
@@ -1103,8 +1104,8 @@ class KeystoneClientTest(common.HeatTestCase):
         ec2_cred = heat_ks_client.create_stack_domain_user_keypair(
             user_id='atestuser2', project_id='aproject')
         self.assertEqual('1234567', ec2_cred.id)
-        self.assertEqual('dummy_access2', ec2_cred.access)
-        self.assertEqual('dummy_secret2', ec2_cred.secret)
+        self.assertEqual('dummy_access2TiC1*', ec2_cred.access)
+        self.assertEqual('dummy_secret2TiC1*', ec2_cred.secret)
 
     def test_get_ec2_keypair_id(self):
 
-- 
2.7.4

