From 417a06056f4db513f9a24e5510fbceefc290ccaf Mon Sep 17 00:00:00 2001
From: Al Bailey <al.bailey@windriver.com>
Date: Tue, 24 Oct 2017 12:34:54 -0500
Subject: [PATCH 03/57] Adding vif-model support for OS::Nova::Server networks

* Support for configurable pci bus slots for guest vnics
* Enable specifying vif-model on attached interfaces

This adds vif-model as an optional argument for server instantiation.
This adds vif-pci-address as an optional argument for server instantiation
This registers a new  VifModelConstraint to block any server with an invalid vif-model value

This commit add handling of the vif-model parameter inside of heat templates
when attaching an interface to a running VM using heat stack-update.
---
 .../clients/os/neutron/neutron_constraints.py      | 21 ++++++
 heat/engine/clients/os/nova.py                     |  5 +-
 heat/engine/resources/openstack/nova/server.py     | 19 +++++
 .../openstack/nova/server_network_mixin.py         |  7 +-
 heat/tests/aws/test_instance.py                    | 18 +++--
 heat/tests/openstack/nova/test_server.py           | 17 +++++
 heat/tests/wr/__init__.py                          |  0
 heat/tests/wr/test_vif_model.py                    | 85 ++++++++++++++++++++++
 setup.cfg                                          |  1 +
 9 files changed, 162 insertions(+), 11 deletions(-)
 create mode 100644 heat/tests/wr/__init__.py
 create mode 100644 heat/tests/wr/test_vif_model.py

diff --git a/heat/engine/clients/os/neutron/neutron_constraints.py b/heat/engine/clients/os/neutron/neutron_constraints.py
index b81549b..8b7b073 100644
--- a/heat/engine/clients/os/neutron/neutron_constraints.py
+++ b/heat/engine/clients/os/neutron/neutron_constraints.py
@@ -84,6 +84,27 @@ class QoSPolicyConstraint(NeutronConstraint):
     extension = 'qos'
 
 
+class VifModelConstraint(constraints.BaseCustomConstraint):
+    # Based on: nova.network.model  and nova.virt.libvirt.vif
+    # Omitting:  'e1000e'
+    VIFS = ['avp',
+            'e1000',
+            'ne2k_pci',
+            'netfront',
+            'pcnet',
+            'pci-sriov',
+            'pci-passthrough',
+            'rtl8139',
+            'spapr-vlan',
+            'virtio']
+
+    expected_exceptions = (ValueError,)
+
+    def validate_with_client(self, client, value):
+        if value not in self.VIFS:
+            raise ValueError('%s is not a supported vif-model.' % value)
+
+
 class PortPairConstraint(NeutronExtConstraint):
     resource_name = 'port_pair'
     extension = 'sfc'
diff --git a/heat/engine/clients/os/nova.py b/heat/engine/clients/os/nova.py
index eb9c030..99da942 100644
--- a/heat/engine/clients/os/nova.py
+++ b/heat/engine/clients/os/nova.py
@@ -687,10 +687,11 @@ echo -e '%s\tALL=(ALL)\tNOPASSWD: ALL' >> /etc/sudoers
                 return True
 
     def interface_attach(self, server_id, port_id=None, net_id=None, fip=None,
-                         security_groups=None):
+                         security_groups=None, vif_model=None):
         server = self.fetch_server(server_id)
         if server:
-            attachment = server.interface_attach(port_id, net_id, fip)
+            attachment = server.interface_attach(port_id, net_id, fip,
+                                                 vif_model)
             if not port_id and security_groups:
                 props = {'security_groups': security_groups}
                 self.clients.client('neutron').update_port(
diff --git a/heat/engine/resources/openstack/nova/server.py b/heat/engine/resources/openstack/nova/server.py
index 036d192..9d72d11 100644
--- a/heat/engine/resources/openstack/nova/server.py
+++ b/heat/engine/resources/openstack/nova/server.py
@@ -47,6 +47,9 @@ class Server(server_base.BaseServer, sh.SchedulerHintsMixin,
     OpenStack cloud.
     """
 
+    # VIF pci pattern is  0000:<bus>:<slot>.0
+    VIF_PCI_PATTERN = '0000:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]\.0'
+
     PROPERTIES = (
         NAME, IMAGE, BLOCK_DEVICE_MAPPING, BLOCK_DEVICE_MAPPING_V2,
         FLAVOR, FLAVOR_UPDATE_POLICY, IMAGE_UPDATE_POLICY, KEY_NAME,
@@ -110,10 +113,12 @@ class Server(server_base.BaseServer, sh.SchedulerHintsMixin,
     _NETWORK_KEYS = (
         NETWORK_UUID, NETWORK_ID, NETWORK_FIXED_IP, NETWORK_PORT,
         NETWORK_SUBNET, NETWORK_PORT_EXTRA, NETWORK_FLOATING_IP,
+        NETWORK_VIF_MODEL, NETWORK_VIF_PCI_ADDRESS,
         ALLOCATE_NETWORK, NIC_TAG,
     ) = (
         'uuid', 'network', 'fixed_ip', 'port',
         'subnet', 'port_extra_properties', 'floating_ip',
+        'vif-model', 'vif-pci-address',
         'allocate_network', 'tag',
     )
 
@@ -479,6 +484,20 @@ class Server(server_base.BaseServer, sh.SchedulerHintsMixin,
                         _('ID of the floating IP to associate.'),
                         support_status=support.SupportStatus(version='6.0.0')
                     ),
+                    NETWORK_VIF_MODEL: properties.Schema(
+                        properties.Schema.STRING,
+                        _('Vif model to use for this network interface.'),
+                        constraints=[
+                            constraints.CustomConstraint('neutron.vifmodel')
+                        ]
+                    ),
+                    NETWORK_VIF_PCI_ADDRESS: properties.Schema(
+                        properties.Schema.STRING,
+                        _('Vif PCI Addr 0000:<bus>:<slot>.0 for interface.'),
+                        constraints=[
+                            constraints.AllowedPattern(VIF_PCI_PATTERN)
+                        ]
+                    ),
                     NIC_TAG: properties.Schema(
                         properties.Schema.STRING,
                         _('Port tag. Heat ignores any update on this property '
diff --git a/heat/engine/resources/openstack/nova/server_network_mixin.py b/heat/engine/resources/openstack/nova/server_network_mixin.py
index de30a06..1bf71d4 100644
--- a/heat/engine/resources/openstack/nova/server_network_mixin.py
+++ b/heat/engine/resources/openstack/nova/server_network_mixin.py
@@ -251,6 +251,10 @@ class ServerNetworkMixin(object):
                             net.get(self.NETWORK_FIXED_IP)})
                 self._floating_ip_neutron_associate(
                     net.get(self.NETWORK_FLOATING_IP), floating_ip_data)
+            if net.get(self.NETWORK_VIF_MODEL):
+                nic_info['vif-model'] = net[self.NETWORK_VIF_MODEL]
+            if net.get(self.NETWORK_VIF_PCI_ADDRESS):
+                nic_info['vif-pci-address'] = net[self.NETWORK_VIF_PCI_ADDRESS]
 
             if net.get(self.NIC_TAG):
                 nic_info[self.NIC_TAG] = net.get(self.NIC_TAG)
@@ -444,7 +448,8 @@ class ServerNetworkMixin(object):
             for idx, net in enumerate(new_nets):
                 handler_kwargs = {'port_id': None,
                                   'net_id': None,
-                                  'fip': None}
+                                  'fip': None,
+                                  'vif_model': net.get(self.NETWORK_VIF_MODEL)}
 
                 if net.get(self.NETWORK_PORT):
                     handler_kwargs['port_id'] = net.get(self.NETWORK_PORT)
diff --git a/heat/tests/aws/test_instance.py b/heat/tests/aws/test_instance.py
index f422aa5..ea4e5b7 100644
--- a/heat/tests/aws/test_instance.py
+++ b/heat/tests/aws/test_instance.py
@@ -886,7 +886,7 @@ class InstancesTest(common.HeatTestCase):
             'd1e9c73c-04fe-4e9e-983c-d5ef94cd1a46').AndReturn(None)
         self.m.StubOutWithMock(return_server, 'interface_attach')
         return_server.interface_attach('34b752ec-14de-416a-8722-9531015e04a5',
-                                       None, None).AndReturn(None)
+                                       None, None, None).AndReturn(None)
         self.m.ReplayAll()
 
         scheduler.TaskRunner(instance.update, after, before)()
@@ -964,7 +964,7 @@ class InstancesTest(common.HeatTestCase):
         self.fc.servers.get('1234').MultipleTimes().AndReturn(return_server)
         self.m.StubOutWithMock(return_server, 'interface_attach')
         return_server.interface_attach('d1e9c73c-04fe-4e9e-983c-d5ef94cd1a46',
-                                       None, None).AndReturn(None)
+                                       None, None, None).AndReturn(None)
 
         self.m.ReplayAll()
 
@@ -1006,9 +1006,11 @@ class InstancesTest(common.HeatTestCase):
             'ea29f957-cd35-4364-98fb-57ce9732c10d').AndReturn(None)
         self.m.StubOutWithMock(return_server, 'interface_attach')
         return_server.interface_attach('d1e9c73c-04fe-4e9e-983c-d5ef94cd1a46',
-                                       None, None).InAnyOrder().AndReturn(None)
+                                       None, None,
+                                       None).InAnyOrder().AndReturn(None)
         return_server.interface_attach('34b752ec-14de-416a-8722-9531015e04a5',
-                                       None, None).InAnyOrder().AndReturn(None)
+                                       None, None,
+                                       None).InAnyOrder().AndReturn(None)
 
         self.m.ReplayAll()
 
@@ -1048,9 +1050,9 @@ class InstancesTest(common.HeatTestCase):
             'd1e9c73c-04fe-4e9e-983c-d5ef94cd1a46').AndReturn(None)
         self.m.StubOutWithMock(return_server, 'interface_attach')
         return_server.interface_attach('ea29f957-cd35-4364-98fb-57ce9732c10d',
-                                       None, None).AndReturn(None)
+                                       None, None, None).AndReturn(None)
         return_server.interface_attach('34b752ec-14de-416a-8722-9531015e04a5',
-                                       None, None).AndReturn(None)
+                                       None, None, None).AndReturn(None)
 
         self.m.ReplayAll()
 
@@ -1084,7 +1086,7 @@ class InstancesTest(common.HeatTestCase):
         return_server.interface_detach(
             'd1e9c73c-04fe-4e9e-983c-d5ef94cd1a46').AndReturn(None)
         self.m.StubOutWithMock(return_server, 'interface_attach')
-        return_server.interface_attach(None, None, None).AndReturn(None)
+        return_server.interface_attach(None, None, None, None).AndReturn(None)
         self.m.ReplayAll()
 
         scheduler.TaskRunner(instance.update, update_template)()
@@ -1139,7 +1141,7 @@ class InstancesTest(common.HeatTestCase):
             self.m.StubOutWithMock(return_server, 'interface_attach')
             return_server.interface_attach(
                 'ea29f957-cd35-4364-98fb-57ce9732c10d',
-                None, None).AndReturn(None)
+                None, None, None).AndReturn(None)
 
         self.m.ReplayAll()
 
diff --git a/heat/tests/openstack/nova/test_server.py b/heat/tests/openstack/nova/test_server.py
index bd0f2db..3af2c9d 100644
--- a/heat/tests/openstack/nova/test_server.py
+++ b/heat/tests/openstack/nova/test_server.py
@@ -3252,10 +3252,13 @@ class ServersTest(common.HeatTestCase):
 
     def create_old_net(self, port=None, net=None,
                        ip=None, uuid=None, subnet=None,
+                       vif_model=None, vif_pci_address=None,
                        port_extra_properties=None, floating_ip=None,
                        str_network=None, tag=None):
         return {'port': port, 'network': net, 'fixed_ip': ip, 'uuid': uuid,
                 'subnet': subnet, 'floating_ip': floating_ip,
+                'vif-model': vif_model,
+                'vif-pci-address': vif_pci_address,
                 'port_extra_properties': port_extra_properties,
                 'allocate_network': str_network,
                 'tag': tag}
@@ -3307,6 +3310,7 @@ class ServersTest(common.HeatTestCase):
             old_nets_copy = copy.deepcopy(old_nets)
             for net in new_nets_copy:
                 for key in ('port', 'network', 'fixed_ip', 'uuid', 'subnet',
+                            'vif-model', 'vif-pci-address',
                             'port_extra_properties', 'floating_ip',
                             'allocate_network', 'tag'):
                     net.setdefault(key)
@@ -3339,6 +3343,7 @@ class ServersTest(common.HeatTestCase):
         old_nets_copy = copy.deepcopy(old_nets)
         for net in new_nets_copy:
             for key in ('port', 'network', 'fixed_ip', 'uuid', 'subnet',
+                        'vif-model', 'vif-pci-address',
                         'port_extra_properties', 'floating_ip',
                         'allocate_network', 'tag'):
                 net.setdefault(key)
@@ -3364,6 +3369,8 @@ class ServersTest(common.HeatTestCase):
              'subnet': None,
              'uuid': None,
              'port_extra_properties': None,
+             'vif-model': None,
+             'vif-pci-address': None,
              'floating_ip': None,
              'allocate_network': None,
              'tag': None}]
@@ -3408,6 +3415,8 @@ class ServersTest(common.HeatTestCase):
              'fixed_ip': None,
              'subnet': None,
              'floating_ip': None,
+             'vif-model': None,
+             'vif-pci-address': None,
              'port_extra_properties': None,
              'uuid': None,
              'allocate_network': None,
@@ -3418,6 +3427,8 @@ class ServersTest(common.HeatTestCase):
              'subnet': None,
              'port_extra_properties': None,
              'floating_ip': None,
+             'vif-model': None,
+             'vif-pci-address': None,
              'uuid': None,
              'allocate_network': None,
              'tag': None},
@@ -3427,6 +3438,8 @@ class ServersTest(common.HeatTestCase):
              'subnet': None,
              'port_extra_properties': None,
              'floating_ip': None,
+             'vif-model': None,
+             'vif-pci-address': None,
              'uuid': None,
              'allocate_network': None,
              'tag': None},
@@ -3436,6 +3449,8 @@ class ServersTest(common.HeatTestCase):
              'subnet': None,
              'port_extra_properties': None,
              'floating_ip': None,
+             'vif-model': None,
+             'vif-pci-address': None,
              'uuid': None,
              'allocate_network': None,
              'tag': None},
@@ -3445,6 +3460,8 @@ class ServersTest(common.HeatTestCase):
              'subnet': None,
              'port_extra_properties': None,
              'floating_ip': None,
+             'vif-model': None,
+             'vif-pci-address': None,
              'network': None,
              'allocate_network': None,
              'tag': None}]
diff --git a/heat/tests/wr/__init__.py b/heat/tests/wr/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/heat/tests/wr/test_vif_model.py b/heat/tests/wr/test_vif_model.py
new file mode 100644
index 0000000..2579e3c
--- /dev/null
+++ b/heat/tests/wr/test_vif_model.py
@@ -0,0 +1,85 @@
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import mock
+import six
+
+from heat.common import exception
+from heat.common import template_format
+from heat.engine.clients.os import glance
+from heat.engine.clients.os import neutron
+from heat.engine.clients.os import nova
+from heat.engine import stack
+from heat.engine import template
+from heat.tests import common
+from heat.tests import utils
+
+test_template_vif_model = '''
+heat_template_version: 2013-05-23
+resources:
+    vif_server:
+        type: OS::Nova::Server
+        properties:
+            image: wrl6
+            flavor: 1234
+            networks:
+            - { network: 12345, vif-model: virtio }
+'''
+
+test_template_bad_vif_model = '''
+heat_template_version: 2013-05-23
+resources:
+    vif_server:
+        type: OS::Nova::Server
+        properties:
+            image: wrl6
+            flavor: 1234
+            networks:
+            - { network: 12345, vif-model: broken }
+'''
+
+
+# The purpose of these unit tests is to test validation
+# We do not test nova server creation itself
+class VifModelTest(common.HeatTestCase):
+
+    def setUp(self):
+        super(VifModelTest, self).setUp()
+        self.tenant_id = 'test_tenant'
+        self.novaclient = mock.Mock()
+        self.m.StubOutWithMock(nova.NovaClientPlugin, '_create')
+        self.m.StubOutWithMock(self.novaclient.servers, 'get')
+        self.patchobject(nova.NovaClientPlugin, 'get_server',
+                         return_value=mock.MagicMock())
+        self.mock_image = mock.Mock(min_ram=128, min_disk=1, status='active')
+        self.patchobject(glance.GlanceClientPlugin, 'get_image',
+                         return_value=self.mock_image)
+        self.mock_flavor = mock.Mock(ram=128, disk=1)
+        self.patchobject(nova.NovaClientPlugin, 'get_flavor',
+                         return_value=self.mock_flavor)
+        self.patchobject(neutron.NeutronClientPlugin,
+                         'find_resourceid_by_name_or_id')
+
+    def test_vif_model_valid(self):
+        tpl = template_format.parse(test_template_vif_model)
+        ctx = utils.dummy_context(tenant_id=self.tenant_id)
+        stk = stack.Stack(ctx, 'test_stack', template.Template(tpl))
+        stk.validate()
+
+    def test_vif_model_invalid(self):
+        tpl = template_format.parse(test_template_bad_vif_model)
+        ctx = utils.dummy_context(tenant_id=self.tenant_id)
+        stk = stack.Stack(ctx, 'test_stack', template.Template(tpl))
+        exc = self.assertRaises(exception.StackValidationFailed,
+                                stk.validate)
+        self.assertIn("is not a supported vif-model", six.text_type(exc))
diff --git a/setup.cfg b/setup.cfg
index 585fec7..2c07ded 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -136,6 +136,7 @@ heat.constraints =
     neutron.segment = heat.engine.clients.os.openstacksdk:SegmentConstraint
     neutron.subnet = heat.engine.clients.os.neutron.neutron_constraints:SubnetConstraint
     neutron.subnetpool = heat.engine.clients.os.neutron.neutron_constraints:SubnetPoolConstraint
+    neutron.vifmodel = heat.engine.clients.os.neutron.neutron_constraints:VifModelConstraint
     nova.flavor = heat.engine.clients.os.nova:FlavorConstraint
     nova.host = heat.engine.clients.os.nova:HostConstraint
     nova.keypair = heat.engine.clients.os.nova:KeypairConstraint
-- 
2.7.4

