From ce4b20c75441c35fe27136b4ae75655f69f2571e Mon Sep 17 00:00:00 2001
From: Al Bailey <al.bailey@windriver.com>
Date: Wed, 25 Oct 2017 10:49:05 -0500
Subject: [PATCH 26/57] More robust handling of process death for
 parent and child processes

Ensure that heat api child processes terminate when their parent process dies unexpectedly
Ensure that heat api child processes do not hang during clean shutdown

Basically porting the same pipe handler code that exists in oslo_service.
This allows the child processes to detect their parent process has died unexpectedly (ie: kill -9)

When a child process does a graceful shutdown it was observed to sometimes never compelte.
This code waits up to a second before resorting to a more forceful shutdown of the child process.
---
 heat/common/wsgi.py | 31 +++++++++++++++++++++++++++++++
 1 file changed, 31 insertions(+)

diff --git a/heat/common/wsgi.py b/heat/common/wsgi.py
index c2a81f8..0b970c5 100644
--- a/heat/common/wsgi.py
+++ b/heat/common/wsgi.py
@@ -316,6 +316,11 @@ class Server(object):
         signal.signal(signal.SIGTERM, self.kill_children)
         signal.signal(signal.SIGINT, self.kill_children)
         signal.signal(signal.SIGHUP, self.hup)
+
+        # Adding this to detect if a parent dies abruptly
+        rfd, self.writepipe = os.pipe()
+        self.readpipe = eventlet.greenio.GreenPipe(rfd, 'r')
+
         while len(self.children) < childs_num:
             self.run_child()
 
@@ -514,6 +519,26 @@ class Server(object):
             LOG.info('Started child %s', pid)
             self.children.add(pid)
 
+    def _pipe_watcher(self):
+        def _on_timeout_exit(*args):
+            LOG.info('Graceful shutdown timeout exceeded, '
+                     'instantaneous exiting')
+            os._exit(1)
+
+        # This will block until the write end is closed when the parent
+        # dies unexpectedly
+
+        self.readpipe.read(1)
+        LOG.info('Parent process has died unexpectedly, exiting')
+
+        # allow up to 1 second for sys.exit to gracefully shutdown
+        signal.signal(signal.SIGALRM, _on_timeout_exit)
+        signal.alarm(1)
+        # do the same as child_hup
+        eventlet.wsgi.is_accepting = False
+        self.sock.close()
+        sys.exit(1)
+
     def run_server(self):
         """Run a WSGI server."""
         eventlet.wsgi.HttpProtocol.default_request_version = "HTTP/1.0"
@@ -521,6 +546,12 @@ class Server(object):
         eventlet.patcher.monkey_patch(all=False, socket=True)
         self.pool = eventlet.GreenPool(size=self.threads)
         socket_timeout = cfg.CONF.eventlet_opts.client_socket_timeout or None
+
+        # Close write to ensure only parent has it open
+        os.close(self.writepipe)
+        # Create greenthread to watch for parent to close pipe
+        eventlet.spawn_n(self._pipe_watcher)
+
         try:
             eventlet.wsgi.server(
                 self.sock,
-- 
2.7.4

