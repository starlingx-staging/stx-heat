From af8bb9516e5c480654b89dc91a34762086bc510d Mon Sep 17 00:00:00 2001
From: Al Bailey <al.bailey@windriver.com>
Date: Tue, 24 Oct 2017 14:22:10 -0500
Subject: [PATCH 07/57] ServerGroup support and enhancements besteffort and group size

ServerGroup api enhancements for besteffort and group size
The fix delays the nova server VM deletion to not return True unless a NotFound exception is raised
This allows the post deletion hooks for the VM to fire, which can include tearing down servergroup membership.
---
 heat/engine/clients/os/nova.py                     |  6 +-
 .../resources/openstack/nova/server_group.py       | 84 ++++++++++++++++++++--
 heat/tests/aws/test_instance.py                    |  3 +-
 heat/tests/aws/test_instance_network.py            |  3 +-
 heat/tests/openstack/nova/test_server_group.py     |  9 ++-
 5 files changed, 96 insertions(+), 9 deletions(-)

diff --git a/heat/engine/clients/os/nova.py b/heat/engine/clients/os/nova.py
index 42b06fc..85e3609 100644
--- a/heat/engine/clients/os/nova.py
+++ b/heat/engine/clients/os/nova.py
@@ -484,7 +484,11 @@ echo -e '%s\tALL=(ALL)\tNOPASSWD: ALL' >> /etc/sudoers
 
         status = self.get_status(server)
         if status in ("DELETED", "SOFT_DELETED"):
-            return True
+            # Fix timing bug related to servergroup deletion
+            # only return true when "Not Found" to allow plugins
+            # to complete their operations
+            LOG.info('Server %s deleted. DB cleanup pending.' % server.name)
+            return False
         if status == 'ERROR':
             fault = getattr(server, 'fault', {})
             message = fault.get('message', 'Unknown')
diff --git a/heat/engine/resources/openstack/nova/server_group.py b/heat/engine/resources/openstack/nova/server_group.py
index 06c394e..663911b 100644
--- a/heat/engine/resources/openstack/nova/server_group.py
+++ b/heat/engine/resources/openstack/nova/server_group.py
@@ -9,6 +9,13 @@
 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 #    License for the specific language governing permissions and limitations
 #    under the License.
+#
+# Copyright (c) 2013-2015 Wind River Systems, Inc.
+#
+#
+#
+#
+#
 
 from heat.common.i18n import _
 from heat.engine import constraints
@@ -16,6 +23,15 @@ from heat.engine import properties
 from heat.engine import resource
 from heat.engine import support
 
+from heat.common import exception
+from oslo_log import log as logging
+from oslo_utils import excutils
+
+LOG = logging.getLogger(__name__)
+
+(GROUP_SIZE_METAKEY, BEST_EFFORT_METAKEY) = (
+    'wrs-sg:group_size', 'wrs-sg:best_effort')
+
 
 class ServerGroup(resource.Resource):
     """A resource for managing a Nova server group.
@@ -33,9 +49,9 @@ class ServerGroup(resource.Resource):
     required_service_extension = 'os-server-groups'
 
     PROPERTIES = (
-        NAME, POLICIES
+        NAME, POLICIES, GROUP_SIZE, BEST_EFFORT
     ) = (
-        'name', 'policies'
+        'name', 'policies', 'group_size', 'best_effort'
     )
 
     properties_schema = {
@@ -57,6 +73,17 @@ class ServerGroup(resource.Resource):
                 properties.Schema.STRING,
             )
         ),
+        GROUP_SIZE: properties.Schema(
+            properties.Schema.INTEGER,
+            _('Maximum number of servers in the server group.'),
+            update_allowed=True
+        ),
+        BEST_EFFORT: properties.Schema(
+            properties.Schema.BOOLEAN,
+            _('Whether the scheduler should still allow the server to '
+              'be created even if it cannot satisfy the group policy.'),
+            update_allowed=True
+        ),
     }
 
     def handle_create(self):
@@ -67,8 +94,24 @@ class ServerGroup(resource.Resource):
                 version=self.client_plugin().V2_15)
         else:
             client = self.client()
-        server_group = client.server_groups.create(name=name,
-                                                   policies=policies)
+
+        group_size = self.properties.get(self.GROUP_SIZE)
+        best_effort = self.properties.get(self.BEST_EFFORT)
+        metadata = {}
+        if group_size is not None:
+            metadata[GROUP_SIZE_METAKEY] = str(group_size)
+        if best_effort is not None:
+            metadata[BEST_EFFORT_METAKEY] = str(best_effort).lower()
+
+        kwargs = {self.NAME: name,
+                  self.POLICIES: policies,
+                  'metadata': metadata}
+        try:
+            server_group = client.server_groups.create(**kwargs)
+        except Exception:
+            with excutils.save_and_reraise_exception():
+                msg = _('Unable to create server group.')
+                LOG.error(msg)
         self.resource_id_set(server_group.id)
 
     def physical_resource_name(self):
@@ -77,6 +120,39 @@ class ServerGroup(resource.Resource):
             return name
         return super(ServerGroup, self).physical_resource_name()
 
+    def handle_update(self, json_snippet=None, tmpl_diff=None, prop_diff=None):
+        # We don't currently handle server group metadata in the stack.
+        # The stack "best_effort" and "group_size" properties actually map to
+        # nova server group metadata.  Don't get confused. :)
+
+        metadata = {}
+
+        if self.BEST_EFFORT in prop_diff:
+            best_effort = prop_diff[self.BEST_EFFORT]
+            metadata[BEST_EFFORT_METAKEY] = str(best_effort).lower()
+
+        if self.GROUP_SIZE in prop_diff:
+            group_size = prop_diff[self.GROUP_SIZE]
+            server_group = self.nova().server_groups.get(self.resource_id)
+            if len(server_group.members) > group_size:
+                raise exception.Invalid(
+                    reason='Cannot update with a group size '
+                           'smaller than the current number of '
+                           'servers in the group')
+            metadata[GROUP_SIZE_METAKEY] = str(group_size)
+
+        self.nova().server_groups.set_metadata(self.resource_id, metadata)
+
+    def validate(self):
+        # Validate any of the provided params
+        super(ServerGroup, self).validate()
+        policies = self.properties.get(self.POLICIES)
+        for policy in policies:
+            if policy not in ('affinity', 'anti-affinity'):
+                msg = _('Policy for server group %s must be "affinity" or '
+                        '"anti-affinity"') % self.name
+                raise exception.StackValidationFailed(message=msg)
+
 
 def resource_mapping():
     return {'OS::Nova::ServerGroup': ServerGroup}
diff --git a/heat/tests/aws/test_instance.py b/heat/tests/aws/test_instance.py
index ea4e5b7..951fbdd 100644
--- a/heat/tests/aws/test_instance.py
+++ b/heat/tests/aws/test_instance.py
@@ -686,7 +686,8 @@ class InstancesTest(common.HeatTestCase):
         d2 = copy.deepcopy(d1)
         if vm_delete_status == 'DELETED':
             d2['server']['status'] = vm_delete_status
-            get().AndReturn((200, d2))
+            # get().AndReturn((200, d2))
+            get().AndRaise(fakes_nova.fake_exception())
         else:
             get().AndRaise(fakes_nova.fake_exception())
 
diff --git a/heat/tests/aws/test_instance_network.py b/heat/tests/aws/test_instance_network.py
index dbfd174..f01f5ed 100644
--- a/heat/tests/aws/test_instance_network.py
+++ b/heat/tests/aws/test_instance_network.py
@@ -186,7 +186,8 @@ class instancesTest(common.HeatTestCase):
         d2 = copy.deepcopy(d1)
         if vm_delete_status == 'DELETED':
             d2['server']['status'] = vm_delete_status
-            get().AndReturn((200, d2))
+            # get().AndReturn((200, d2))
+            get().AndRaise(fakes_nova.fake_exception())
         else:
             get().AndRaise(fakes_nova.fake_exception())
 
diff --git a/heat/tests/openstack/nova/test_server_group.py b/heat/tests/openstack/nova/test_server_group.py
index a8129fa..a3e9c7d 100644
--- a/heat/tests/openstack/nova/test_server_group.py
+++ b/heat/tests/openstack/nova/test_server_group.py
@@ -28,7 +28,9 @@ sg_template = {
             "type": "OS::Nova::ServerGroup",
             "properties": {
                 "name": "test",
-                "policies": ["anti-affinity"]
+                "policies": ["anti-affinity"],
+                "best_effort": True,
+                "group_size": 2
             }
         }
     }
@@ -72,7 +74,7 @@ class NovaServerGroupTest(common.HeatTestCase):
             name = 'test'
             n = name
 
-            def fake_create(name, policies):
+            def fake_create(name, policies, metadata):
                 self.assertGreater(len(name), 1)
                 return FakeGroup(n)
             self.sg_mgr.create = fake_create
@@ -86,6 +88,9 @@ class NovaServerGroupTest(common.HeatTestCase):
         expected_args = ()
         expected_kwargs = {'name': 'test',
                            'policies': ["anti-affinity"],
+                           'metadata': {'wrs-sg:best_effort': 'true',
+                                        'wrs-sg:group_size': '2'}
+
                            }
         self.sg_mgr.create.assert_called_once_with(*expected_args,
                                                    **expected_kwargs)
-- 
2.7.4

