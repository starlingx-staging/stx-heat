From cbe698ce63c8aa4a475be253674872aa1a8c7c03 Mon Sep 17 00:00:00 2001
From: Al Bailey <al.bailey@windriver.com>
Date: Wed, 25 Oct 2017 12:02:23 -0500
Subject: [PATCH 34/57] Enhancements to CIDR and IP address constraints

Upstream does not reject an ipaddress for ipv4 which fewer than 3 dots such as
'a'  or 'a.b' or 'a.b.c'

This enhancement provides an extra check that an ipv4 address has syntax:
'a.b.c.d'

This also applies to CIDR
Inspected by Angie
---
 heat/engine/constraint/common_constraints.py      | 27 +++++++++++++++++++++--
 heat/tests/constraints/test_common_constraints.py |  8 +++++++
 2 files changed, 33 insertions(+), 2 deletions(-)

diff --git a/heat/engine/constraint/common_constraints.py b/heat/engine/constraint/common_constraints.py
index 3d36375..90fb6c9 100644
--- a/heat/engine/constraint/common_constraints.py
+++ b/heat/engine/constraint/common_constraints.py
@@ -33,9 +33,23 @@ class TestConstraintDelay(constraints.BaseCustomConstraint):
 
 class IPConstraint(constraints.BaseCustomConstraint):
 
+    # is_valid_ip in oslo_utils simply calls netaddr validation
+    # netaddr considers 1.2.3 and 1.2 to be valid ipv4 addresses
+    # This code makes ipv4 require at least 3 dots
+    def is_valid_ipv4(self, address):
+        if isinstance(address, six.string_types):
+            if address.count('.') != 3:
+                return False
+        return netutils.is_valid_ipv4(address)
+
+    def is_valid_ipv6(self, address):
+        return netutils.is_valid_ipv6(address)
+
     def validate(self, value, context, template=None):
         self._error_message = 'Invalid IP address'
-        return netutils.is_valid_ip(value)
+        if not isinstance(value, six.string_types):
+            return False
+        return self.is_valid_ipv4(value) or self.is_valid_ipv6(value)
 
 
 class MACConstraint(constraints.BaseCustomConstraint):
@@ -107,9 +121,18 @@ class CIDRConstraint(constraints.BaseCustomConstraint):
             return False
         return True
 
+    def _validate_ip(self, data, context, template):
+        chunks = data.split('/')
+        if len(chunks) > 1:
+            ipaddr = chunks[0]
+            if not IPConstraint().validate(ipaddr, context, template):
+                raise ValueError('invalid IPNetwork %s' % data)
+        return True
+
     def validate(self, value, context, template=None):
         try:
-            netaddr.IPNetwork(value)
+            netaddr.IPNetwork(value, implicit_prefix=True)
+            self._validate_ip(value, context, template)
             return self._validate_whitespace(value)
         except Exception as ex:
             self._error_message = 'Invalid net cidr %s ' % six.text_type(ex)
diff --git a/heat/tests/constraints/test_common_constraints.py b/heat/tests/constraints/test_common_constraints.py
index eadd317..344cf2b 100644
--- a/heat/tests/constraints/test_common_constraints.py
+++ b/heat/tests/constraints/test_common_constraints.py
@@ -35,6 +35,11 @@ class TestIPConstraint(common.HeatTestCase):
 
     def test_invalidate_ipv4_format(self):
         invalidate_format = [
+            None,
+            123,
+            '1.1',
+            '1.1.',
+            '1.1.1',
             '1.1.1.',
             '1.1.1.256',
             'invalidate format',
@@ -111,6 +116,9 @@ class TestCIDRConstraint(common.HeatTestCase):
             'Invalid cidr',
             '300.0.0.0/24',
             '10.0.0.0/33',
+            '10.0.0/24',
+            '10.0/24',
+            '10.0.a.10/24',
             '8.8.8.0/ 24'
         ]
         for cidr in invalidate_format:
-- 
2.7.4

